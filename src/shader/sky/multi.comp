#version 450 core
#define THREAD_GROUP_SIZE 4
#define DIR_SAMPLE_COUNT 64
#define RAY_MARCH_STEPS 20
#define PI 3.1415926f 

layout(local_size_x=THREAD_GROUP_SIZE,local_size_y=THREAD_GROUP_SIZE,local_size_z=1) in;

layout(rgba32f,binding=0) uniform image2D multiLut; 
uniform sampler2D transmittance;

struct AtmosphereParameters{
    float solar_irradiance; // solar irradiance at the top of the atmosphere
    float sun_angular_radius;
    float top_radius;
    float bottom_radius; 

    // DensityProfile rayleigh_density; 
    float HDensityRayleigh;
    // DensityProfile mie_density; 
    float HDensityMie;
    float OzoneCenter;

    float mie_g; // g coefficient in phase function

    vec3 rayleigh_scattering;//scattering coefficient of air molecules
    vec3 mie_scattering; // scattering cofficient, a function of wavelength.
    vec3 mie_extinction; 

    // DensityProfile absorption_density; //ozone layer
    vec3 absorption_extinction; 
    float OzoneWidth; 
};

layout(std140, binding=7) uniform ATMOS{
    AtmosphereParameters atmosphere;
};

float DistanceToTop(float r, float mu) 
{
    // mu = cos theta 
    // r = polar radius
    if(r > atmosphere.top_radius)
        return -1; 
    // if(mu < -1.0 || mu > 1.0)
        // return -1;
    float discriminant = r * r * (mu * mu -1.0f) + atmosphere.top_radius * atmosphere.top_radius;
    if(discriminant < 0)
        return -1; 
    return (-r*mu+sqrt(discriminant));
}

float DistanceToBottom(float r, float mu){
    // mu = cos theta 
    // r = polar radius
    if(r > atmosphere.top_radius)
        return -1; 
    if(mu < -1.0 || mu > 1.0)
        return -1;
    float discriminant = r * r * (mu * mu -1.0f) + atmosphere.top_radius * atmosphere.top_radius;
    if(discriminant < 0)
        return -1; 
    return (-r*mu-sqrt(discriminant));
}

bool RayIntersectsGround(float r,float mu){
    return mu < 0.0 && r * r * (mu * mu - 1.0) +
      atmosphere.bottom_radius * atmosphere.bottom_radius >= 0.0;
}

float GetProfileDensity(float hDensity,float altitude,bool isOzone){
    float density = 0.0f;
    if(isOzone){
        density = max(0,1-abs(altitude - atmosphere.OzoneCenter)/atmosphere.OzoneWidth);
    }
    else{
        density = exp(-altitude/hDensity);
    }
    return clamp(density, 0.0f, 1.0f);
}

vec2 GetTransmittanceTextureUV(float r, float mu){
    float H = sqrt(atmosphere.top_radius * atmosphere.top_radius -
      atmosphere.bottom_radius * atmosphere.bottom_radius);
  // Distance to the horizon.
    float rho =
        sqrt(r * r - atmosphere.bottom_radius * atmosphere.bottom_radius);
    // Distance to the top atmosphere boundary for the ray (r,mu), and its minimum
    // and maximum values over all mu - obtained for (r,1) and (r,mu_horizon).
    float d = DistanceToTop(r, mu);
    float d_min = atmosphere.top_radius - r;
    float d_max = rho + H;
    float x_mu = (d - d_min) / (d_max - d_min);
    float x_r = rho / H;
    return vec2(x_mu,x_r);
}
vec3 GetTransmittanceToTopAtmosphereBoundary(
    
    // image2D transmittance_texture,
    float r, float mu) {

    vec2 uv = GetTransmittanceTextureUV(r, mu);
    // ivec2 texCoords = ivec2(int(uv.x * (transTexWidth-1)),int(uv.y * (transTexHeight-1))) ;
    // return vec3(imageLoad(transmittance_texture, texCoords));
    return vec3(texture(transmittance,uv));
}

vec3 GetTransmittance(
    
    // image2D transmittanceTexture,
    float r,float mu,float d,bool ray_intersect_ground
){
    float r_d = sqrt(d * d + 2.0 * r * mu * d + r * r);
    float mu_d = (r * mu + d) / r_d;

    if (ray_intersect_ground) {
        return min(
            GetTransmittanceToTopAtmosphereBoundary(
                // transmittance_texture,
                r_d, -mu_d) /
            GetTransmittanceToTopAtmosphereBoundary(
                // transmittanceTexture, 
                r, -mu),
            1.0f);
    } else {
        return min(
            GetTransmittanceToTopAtmosphereBoundary(
                // transmittanceTexture, 
                r, mu) /
            GetTransmittanceToTopAtmosphereBoundary(
                // transmittanceTexture, 
                r_d, mu_d),
            1.0f);
    }
}

vec3 GetTransmittanceToSun(
    // image2D transmittance_texture,
    float r, float mu_s) {
    float sin_theta_h = atmosphere.bottom_radius / r;
    float cos_theta_h = -sqrt(max(1.0 - sin_theta_h * sin_theta_h, 0.0));
    return GetTransmittanceToTopAtmosphereBoundary(
        //   transmittance_texture, 
          r, mu_s) *
        smoothstep(-sin_theta_h * atmosphere.sun_angular_radius ,
                 sin_theta_h * atmosphere.sun_angular_radius ,
                 mu_s - cos_theta_h);
}

float RayleighPhaseFunction(float nu) {
  float k = 3.0 / (16.0 * PI);
  return k * (1.0 + nu * nu);
}

float MiePhaseFunction(float g, float nu) {
  float k = 3.0 / (8.0 * PI) * (1.0 - g * g) / (2.0 + g * g);
  return k * (1.0 + nu * nu) / pow(1.0 + g * g - 2.0 * g * nu, 1.5);
}
void integrate(
    float r, float nu, float mu, float mu_s,out vec3 innerL2,out vec3 innerF
){
    float endT = 0;
    bool intersect_ground = RayIntersectsGround(r,mu);
    if(intersect_ground){
        endT = DistanceToBottom(r,mu);
    }
    else{
        endT = DistanceToTop(r,mu);
    }
    float dt = endT / RAY_MARCH_STEPS;
    float t = 0.0f;

    vec3 sumSigmaT = vec3(0.0f);
    vec3 sumL2 = vec3(0.0f);
    vec3 sumF = vec3(0.0f);

    for(int i =0 ;i<RAY_MARCH_STEPS;++i){
        // compute Lf(x,v)
        t += dt;

        // current sample point to planet center
        float r_i = sqrt(t* t+ 2.0 * r * mu * t+ r * r);
        // density at given height, dimensionless.
        vec3 sigmaS = atmosphere.rayleigh_scattering * 
            // RayleighPhaseFunction(nu) *
            GetProfileDensity(atmosphere.HDensityRayleigh,r_i-atmosphere.bottom_radius,false)
            + atmosphere.mie_scattering* 
            // MiePhaseFunction(atmosphere.mie_g,nu) * 
            GetProfileDensity(atmosphere.HDensityMie,r_i,false);

        vec3 simgaT = atmosphere.rayleigh_scattering * GetProfileDensity(atmosphere.HDensityRayleigh,r_i-atmosphere.bottom_radius,false)
            + atmosphere.mie_extinction * GetProfileDensity(atmosphere.HDensityMie,r_i - atmosphere.bottom_radius,false)
            + atmosphere.absorption_extinction * GetProfileDensity(atmosphere.OzoneWidth,r_i,true);
        sumSigmaT += simgaT * dt;

        // transmittance from start -> current 
        vec3 T = exp(-sumSigmaT);

        float mu_s_i = (r * mu_s + t * nu) / r_i;
        vec3 sunT = GetTransmittanceToSun(r_i,mu_s_i);
        sumL2 += sigmaS * T * sunT * dt;

        sumF += dt * T * sigmaS; 
    }

    innerL2 = sumL2;
    innerF = sumF;
}


vec3 computeM(float h,float sunTheta){
    float r = atmosphere.bottom_radius + h;
    vec3 sunDir = vec3(0.0f,sin(sunTheta),-cos(sunTheta));

    vec3 sumL2 =vec3(0.0f);
    vec3 sumF = vec3(0.0f);

    for(int i =0;i<8;++i){
        for(int j =0;j<8;++j){
            float theta = i / 8 *PI;
            float phi = j / 8 * 2 * PI;
            vec3 viewDir = vec3(sin(theta) * sin(phi),cos(theta),-sin(theta) * cos(phi));

            float nu = dot(viewDir, sunDir);
            float mu = dot(vec3(0.0f,1.0f,0.0f),viewDir);
            float mu_s = dot(vec3(0.0f,1.0f,0.0f),sunDir);

            vec3 innerL2,innerF;
            integrate(r,nu,mu,mu_s,innerL2,innerF);

            sumL2 += innerL2;
            sumF += innerF;
        }
    }

    sumL2 = sumL2 / DIR_SAMPLE_COUNT * atmosphere.solar_irradiance;
    sumF = sumF / DIR_SAMPLE_COUNT;

    return sumL2 / (1-sumF);
}

void main(){
    ivec2 globalPos = ivec2(gl_GlobalInvocationID.xy);
    uint height = gl_NumWorkGroups.y * gl_WorkGroupSize.y;
    uint width = gl_NumWorkGroups.x * gl_WorkGroupSize.x;
    // float sinSunTheta = globalPos.y * 1.0f / height * 2.0f -1.0f;
    float sunTheta = - globalPos.x * 1.0f / width * PI + PI/2;
    // float sunTheta = asin(sinSunTheta);

    float h = globalPos.y * 1.0f / height * (atmosphere.top_radius - atmosphere.bottom_radius);

    vec3 color = computeM(h,sunTheta);
    // vec3 color = vec3(globalPos.x * 1.0f / width);

    imageStore(multiLut,globalPos,vec4(color,1.0f));
}